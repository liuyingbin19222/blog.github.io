(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{353:function(e,n,t){"use strict";t.r(n);var a=t(8),s=Object(a.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("blockquote",[n("p",[this._v("浅谈JS的设计模式")])]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[this._v(" 设计模式在编码中有着重要的作用，最近自己代码任务很多，体会到理解并熟练掌握设计模式对编码有着非常重要的作用，可以设计出灵活，健壮的代码。下文自己就设计模式说一下在写JS中的应用：\n 1. 工厂模式：\n    工厂模式是用于创建对象实例化函数使用的方式。\n    见代码:\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('          function createDog(name,age,price){\n               this.name = name;\n               this.age = age;\n               this.price = price;\n          }\n          var dog1 = new createDog("john",22,10000);\n          console.log("dog1:",dog1);\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[this._v("      通过createDog函数将形参传递，然后进行赋值。值得一提的是，关于this，这一个函数的this指向的是函数本身，这样创建出来的对象就有着name , age  , price属性，实现对象创建。\n      还可以在函数体中新建一个object对象，向object对象中添加属性最后return这一个对象，也可以实现创建对象。\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('             function createDog(name,age,price){\n                var obj = {};\n               obj["name"] = name;\n               obj["age"] = age;\n               obj["price"] = price == undefined ? 10000: price;\n               return obj;\n          }\n          var dog1 = new createDog("john",22,10000);\n          console.log("dog1:",dog1);\n\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);